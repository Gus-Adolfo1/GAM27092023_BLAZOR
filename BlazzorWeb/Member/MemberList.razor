 @page "/member-list"

@using BlazzorWeb.Data
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using System.Text.Json;
@using System.ComponentModel.DataAnnotations;
@using member.DTOs.memberDTOs;

<h3>MemberList</h3>
<EditForm Model="searchQuery" OnValidSubmit="SubmitSearch">
    <div class="row">
        <div class="col-3">
            <div class="form-group">
                <label for="Name">Name: </label>
                <InputText class="form-control" @bind-Value="searchQuery.nameLike" />
            </div>
        </div>
        <div class="col-3">
            <div class="form-group">
                <label for="LastName">LastName: </label>
                <InputText class="form-control" @bind-Value="searchQuery.lastnameLike" />
            </div>
        </div>
        <div class="col-2">
            <div class="form-group">
                <label for="Take">CantReg x Pag</label>
                <select class="form-control" @bind="searchQuery.Take">
                    @for (var i = 10; i < 1000; i += 10)
                    {
                        <option value="@i">@i</option>
                    }
                </select>
            </div>
        </div>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Buscar</button>
    <NavLink href="/create-customer" class="btn btn-secondary">Ir a crear</NavLink>
    <br />
</EditForm>

@code {
    [Inject]
    MemberService memberService { get; set; }
    [Inject]
    NavigationManager navigation { get; set; }

    searchOutputDTO searchResult = new searchOutputDTO();
    searchQueryDTO searchQuery = new searchQueryDTO { Take = 10 };
    List<Pagination> paginations = new List<Pagination>();
    int skipAnte = 0;
    int skipSi = 0;

    private async Task Search()
    {
        searchResult = await memberService.Search(searchQuery);
    }

    protected override async Task OnInitializedAsync()
    {
        searchQuery.SendRowCount = 2;
        searchQuery.Skip = 0;

        await Search();

        UpdatePagination();
    }

    private async Task SubmitSearch()
    {
        searchQuery.SendRowCount = 2;
        searchQuery.Skip = 0;

        await Search();

        UpdatePagination();
    }

    private async Task PaginationSearch(int skip)
    {
        int countRowTemp = searchResult.CountRow;
        searchQuery.SendRowCount = 1;
        searchQuery.Skip = skip;

        await Search();
        searchResult.CountRow = countRowTemp;
        UpdatePagination();
    }

    private void GoEdit(int memberid)
    {
        navigation.NavigateTo($"/edit-member/{memberid}");
    }

    private void GoDetails(int memberid)
    {
        navigation.NavigateTo($"/member-details/{memberid}");
    }

    private void GoDelete(int memberid)
    {
        navigation.NavigateTo($"/delete-mebmber/{memberid}");
    }

    private void UpdatePagination()
    {
        paginations = new List<Pagination>();
        int totalPages = (int)Math.Ceiling((double)searchResult.CountRow / searchQuery.Take);
        skipAnte = searchQuery.Skip > 0 ? searchQuery.Skip - searchQuery.Take : 0;
        int skipMax = 0;
        for (var i = 0; i < totalPages; i++)
        {
            var pagination = new Pagination()
                {
                    Skip = i * searchQuery.Take,
                    NumPage = i + 1
                };
            paginations.Add(pagination);
            skipMax = pagination.Skip;
        }
        skipSi = searchQuery.Skip + searchQuery.Take;
        skipSi = skipSi > skipMax ? skipSi - searchQuery.Take : skipSi;
    }

    class Pagination
    {
        public int NumPage { get; set; }
        public int Skip { get; set; }
    }
}


